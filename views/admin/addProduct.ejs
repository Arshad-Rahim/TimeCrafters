<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
    

.is-invalid {
    border-color: red !important;
}

.variant-error {
    color: red;
    font-size: 0.85rem;
    margin-top: 5px;
}

.variant-item {
    position: relative;
    background: #f8f9fa;
    transition: all 0.3s ease;
}

.variant-item:hover {
    background: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
   .error-message{
       color: red;
   }


       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }


       .thumbnail {
           margin-right: 10px;


       }
</style>
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Add New Product</h2>
               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">
                   <div class="card-body">
                    <form id="productForm" enctype="multipart/form-data" onsubmit="validateAndSubmit(event)">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" placeholder="Type here" name="productName"
                                   class="form-control border" id="product_name">
                               <div id="productName-error" class="error-message"></div>
                           </div>
                           <div class="col-lg-4 mb-4">
                               <label class="form-label">Brand</label>
                               <select class="form-select border" name="brand">
                                   
                                <% for(let i=0;i<brand.length;i++){ %>
                                       <option value="<%=brand[i].brandName%>">
                                           
                                        <%=brand[i].brandName%> 

                                         
                                       </option>
                                       
                                    <% } %> 
                               </select>
                               <div id="brand-error" class="error-message"></div>
                           </div>
                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                                   rows="4"></textarea>
                               <div id="description-error" class="error-message"></div>
                           </div>

                           <div class="mb-4">
                            <label for="additionalInfo" class="form-label">Additional Information</label>
                            <textarea placeholder="Type here" id="additionalInfo" name="additionalInfo" class="form-control border" rows="4"></textarea>
                            <div id="additionalInfo-error" class="error-message"></div>
                        </div>
                        
                           <div class="row">
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Regular price</label>
                                       <input placeholder="$" name="regularPrice" type="text"
                                           class="form-control border">
                                           <div id="regularPrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Sale price</label>
                                       <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                       <div id="salePrice-error" class="error-message"></div>
                                      
                                   </div>
                                  
                               </div>
                               
                           </div>
                           
                           <div class="card mb-4">
                               <div class="card-body">
                                   <div class="row gx-2">
                                       <div class="col-sm-6 mb-3">
                                           <label class="form-label">Category</label>
                                           <select class="form-select border" style="width: 150px;" name="category">
                                               

                                            <% for(let i=0;i<cat.length;i++){%>
                                              
                                                   <option value="<%=cat[i].name%>">
                                                       <%=cat[i].name%>
                                                   </option>
                                                  
                                                 <%}%>
                                                   
                                           </select>
                                           <div id="category-error" class="error-message"></div>
                                       </div>
                                   </div>
                               </div>
                           </div>
                           <div class="card mb-2">
                               <div class="card-header">
                                   <h4>Choose images</h4>
                               </div>
                               <div class="border row">
                                   <div id="addedImagesContainer" class="thumbnails-container"></div>
                               </div>
                               <div class="row">
                                   <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                       <img src="" alt="" id="imgView1">
                                                                   <input class="form-control" type="file" name="images" id="input1"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage1(event), viewImage(event, 1)">
                                                                       <div id="images-error" class="error-message"></div>
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg1" alt="">
                                                                   <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                                                          
                                                           <div class="row">
                                                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                   <img src="" alt="" id="imgView2">


                                                                   <input class="form-control" type="file" name="images" id="input2"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage2(event),viewImage(event, 2)">
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg2" alt="">
                                                                   <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                                                          
                                                           <div class="row">
                                                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                   <img src="" alt="" id="imgView3">


                                                                   <input class="form-control" type="file" name="images" id="input3"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage3(event),viewImage(event, 3)">
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg3" alt="">
                                                                   <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                                                          
                                                           <div class="row">
                                                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                   <img src="" alt="" id="imgView4">


                                                          
                                                                   <input class="form-control" type="file" name="images" id="input4"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage4(event),viewImage(event, 4)">
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg4" alt="">
                                                                   <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                          
                                                       </div>
                           </div>
                           <div class="card mb-4">
    <div class="card-header">
        <h4>Product Variants</h4>
    </div>
    <div class="card-body">
        <div id="variants-container">

           
        </div>

        <button type="button" class="btn btn-primary mt-3" onclick="addVariant()">
            Add Variant
        </button>
    </div>
</div>
                           <div>
                               <button class="btn btn-md rounded font-sm hover-up"  type="submit">Publish</button>
                           </div>
                       </form>
                   </div>
               </div>
           </div>
       </div>
   </section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
     
<%- include("../../views/partials/admin/footer") %>


<script>

    // function validateAndSubmit(event){
    //     // event.preventDefault();
    //     if(validateForm()){
    //         document.forms[0].submit();
    //     }
    // }

    function validateAndSubmit(event) {
    event.preventDefault();
    
    if(validateForm()) {
        // Get the form data
        const form = document.getElementById('productForm');
        const formData = new FormData(form);
        
        // Get variants data
        const variants = [];
        document.querySelectorAll('.variant-item').forEach(variant => {
            const color = variant.querySelector('input[name$="[color]"]').value;
            const quantity = variant.querySelector('input[name$="[quantity]"]').value;
            if (color && quantity) {
                variants.push({
                    color: color.trim(),
                    quantity: parseInt(quantity)
                });
            }
        });

        // Make sure to keep all existing form data
        const finalFormData = new FormData();

        // Add all the basic product data
        finalFormData.append('productName', formData.get('productName'));
        finalFormData.append('brand', formData.get('brand'));
        finalFormData.append('description', formData.get('description'));
        finalFormData.append('additionalInfo', formData.get('additionalInfo'));
        finalFormData.append('regularPrice', formData.get('regularPrice'));
        finalFormData.append('salePrice', formData.get('salePrice'));
        finalFormData.append('category', formData.get('category'));

        // Add image files
        const imageInputs = form.querySelectorAll('input[type="file"]');
        imageInputs.forEach((input, index) => {
            if (input.files.length > 0) {
                finalFormData.append('images', input.files[0]);
            }
        });
        
        // Add variants as JSON string
        finalFormData.append('variants', JSON.stringify(variants));

        // Log the complete form data for debugging
        for (let pair of finalFormData.entries()) {
            console.log(pair[0] + ': ' + pair[1]);
        }
        
        // Send the data to the server
        fetch('/admin/addProduct', {
            method: 'POST',
            body: finalFormData
        }).then(response => {
    return response.json(); 
})

        .then(data => {
            if (data.success) {
               
                Swal.fire({
                    toast: true,
                    position: "top", 
                    icon: "success", 
                    title: "Product added successfully", 
                    showConfirmButton: false, 
                    timer: 3000 
                });

                setTimeout(() => {
                    window.location.href = '/admin/product';
                }, 1500);
            } else {
                Swal.fire({
                    toast: true,
                    position: "top",
                    icon: 'error',
                    title: 'Oops...',
                    text: data.error || 'Failed to add product',
                    showConfirmButton: false,
                    timer: 3000 
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert(error.message);
        });
    }
}

function isValidValue(value) {
    return value !== null && value !== undefined && value.toString().trim() !== '';
}

    function viewImage1(event){
        document.getElementById('imgView1').src= URL.createObjectURL(event.target.files[0])
    }

    function viewImage2(event){
        document.getElementById('imgView2').src= URL.createObjectURL(event.target.files[0])
    }

    function viewImage3(event){
        document.getElementById('imgView3').src= URL.createObjectURL(event.target.files[0])
    }

    function viewImage4(event){
        document.getElementById('imgView4').src= URL.createObjectURL(event.target.files[0])
    }




    function viewImage(event,index){
        let input = event.target;
        let reader = new FileReader();
        reader.onload = function(){
            let dataURl = reader.result;
            let image = document.getElementById('imgView'+index);
            image.src = dataURl;
            let cropper = new Cropper(image,{
                aspectRatio:1,
                viewMode:1,
                guides:true,
                background:false,
                autoCropArea:1,
                zoomable:true
            });


            let cropperContainer = document.querySelector('#croppedImg'+index).parentNode;
            cropperContainer.style.display='block';


            let saveButton = document.querySelector('#saveButton'+index);
            saveButton.addEventListener('click',async function(){

                let croppedCanvas = cropper.getCroppedCanvas();
                let croppedImage = document.getElementById('croppedImg'+index);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg',1.0);

                let timestamp = new Date().getTime();
                let fileName = `cropped-img-${timestamp}-${index}.png`;



                await croppedCanvas.toBlob(blob=>{
                    let input = document.getElementById('input'+index);
                    let imgFile = new File([blob],fileName,blob);
                    const fileList = new DataTransfer();
                    fileList.items.add(imgFile);
                    input.files = fileList.files
                });

                cropperContainer.style.display='none';
                cropper.destroy();
            });
        };


        reader.readAsDataURL(input.files[0]);
    }


    const selectedImages = [];
    document.getElementById('input1').addEventListener('change',handleFileSelect);

    function handleFileSelect(event){

        const addedImagesContainer = document.getElementById('addedImageContainer');
        addedImagesContainer.innerHTML='';
        const files = event.target.files;

        for(let i=0;i<files.length;i++){
            const file = files[i];
            selectedImages.push(file);
            const thumbnail = document.createElement('div');
            thumbnail.classList.add('thumbnail');


            const img = documetn.getElementById('img');
            img.src = URL.createObjectURL(file);
            img.alt='thumbnail';
            img.style.width='50px';
            img.style.height='auto';
            const removeIcon = document.createElement('span');

            removeIcon.classList.add('remove-icon');
            removeIcon.innerHTML="&times;";
            removeIcon.addEventListener('click',function(){
                const index = selectedImages.indexOf(file);
                if(index==-1){
                    selectedImages.splice(index,1);
                }
                thumbnail.remove();
            });
            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }
    }



    function validateForm() {
              clearErrorMessages();
              const name = document.getElementsByName('productName')[0]?.value;
              const description = document.getElementById('descriptionid')?.value;
              const brand = document.getElementsByName('brand')[0]?.value;
              const price = document.getElementsByName('regularPrice')[0]?.value;
              const saleprice = document.getElementsByName('salePrice')[0]?.value;
              const category = document.getElementsByName('category')[0]?.value;
              const images = document.getElementById('input1')
             
              const additionalInfo = document.getElementById('additionalInfo')?.value;
              let isValid = true
 if (name.trim() === "") {
      displayErrorMessage('productName-error', 'Please enter a product name.');
      isValid = false;
   }  else if (!/^[a-zA-Z0-9\s\-_]+$/.test(name.trim())) {
    displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters, numbers, hyphens, and underscores.');
    isValid = false;
}
            
if (description.trim() === "") {
    displayErrorMessage('description-error', 'Please enter a product description.');
    isValid = false;
} else if (description.trim().length < 10) {
    displayErrorMessage('description-error', 'Product description must be at least 10 characters long.');
    isValid = false;
} else if (!/^[a-zA-Z0-9\s.,'!@#$%^&*()\-_=+{}[\]:;"<>?/\\|®–]*$/.test(description.trim())) {
    displayErrorMessage('description-error', 'Product description contains invalid characters.');
    isValid = false;
}
  

  
 
  
              if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                  displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
              }
  
  
  
  
              if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                  displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
              }
              if (Number(price) < Number(saleprice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }
  
  
             
  
  
              if (images.files.length ===0) {
                  displayErrorMessage("images-error",'Please select an image.');
                  isValid = false;
              }
              

              if (additionalInfo.trim() === "") {
    displayErrorMessage('additionalInfo-error', 'Please enter additional information.');
    isValid = false;
} else if (additionalInfo.trim().length < 10) {
    displayErrorMessage('additionalInfo-error', 'Additional information must be at least 10 characters long.');
    isValid = false;
} else if (!/^[a-zA-Z0-9\s.,'!@#$%^&*()\-_=+{}[\]:;"<>?/\\|®–]*$/.test(additionalInfo.trim())) {
    displayErrorMessage('additionalInfo-error', 'Additional information contains invalid characters.');
    isValid = false;
}

const variants = document.querySelectorAll('.variant-item');
if (variants.length === 0) {
    // Change: Add a red error message for no variants
    const variantsContainer = document.getElementById('variants-container');
    const noVariantError = document.createElement('div');
    noVariantError.className = 'error-message'; // Add this class for red color
    noVariantError.style.color = 'red'; // Explicitly set red color
    noVariantError.textContent = 'Please add at least one variant';
    variantsContainer.appendChild(noVariantError);
    isValid = false;
}

const variantsData = [];
variants.forEach((variant, index) => {
    const colorInput = variant.querySelector('input[name^="variants"][name$="[color]"]');
    const quantityInput = variant.querySelector('input[name^="variants"][name$="[quantity]"]');
    const color = colorInput.value.trim();
    const quantity = quantityInput.value;

    
    let errorDiv = variant.querySelector('.variant-error');
    if (!errorDiv) {
        errorDiv = document.createElement('div');
        errorDiv.className = 'variant-error error-message';
        variant.appendChild(errorDiv);
    }

    if (!color) {
    errorDiv.textContent = 'Color is required';
    errorDiv.style.color = 'red'; 
    colorInput.classList.add('is-invalid');
    isValid = false;
} else if (!/^[a-z]+$/.test(color)) {

    errorDiv.textContent = 'Color should contain only lowercase letters';
    errorDiv.style.color = 'red'; 
    colorInput.classList.add('is-invalid');
    isValid = false;
} else {
    errorDiv.textContent = '';
    colorInput.classList.remove('is-invalid');
}

    if (!quantity || parseInt(quantity) < 0) {
        errorDiv.textContent = 'Valid quantity is required';
        quantityInput.classList.add('is-invalid');
        isValid = false;
    } else {
        errorDiv.textContent = '';
        quantityInput.classList.remove('is-invalid');
    }

    // Only push valid variants
    if (color && quantity && parseInt(quantity) >= 0) {
        variantsData.push({ color, quantity });
    }
});



        const variantsInput = document.createElement('input');
        variantsInput.type = 'hidden';
        variantsInput.name = 'variants'; // This name will be used to access the data in the backend
        variantsInput.value = JSON.stringify(variantsData); // Convert the array to a JSON string
        document.forms[0].appendChild(variantsInput);
        console.log(document.forms[0]);

    return isValid;

          }





          function displayErrorMessage(elementId, message) {
              var errorElement = document.getElementById(elementId);
              errorElement.innerText = message;
              errorElement.style.display = "block";
          }
  
  
          function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
    });

    // CLEAR VARIANT ERRORS
    const variantErrors = document.querySelectorAll('.variant-error');
    variantErrors.forEach(error => {
        error.textContent = '';
    });

    // Remove invalid classes from inputs
    const invalidInputs = document.querySelectorAll('.is-invalid');
    invalidInputs.forEach(input => {
        input.classList.remove('is-invalid');
    });
}


</script>           






<script>
    let variantCount = 0;
    
    function addVariant() {
    const container = document.getElementById('variants-container');
    const variantDiv = document.createElement('div');
    variantDiv.className = 'variant-item border rounded p-3 mb-3';
    variantDiv.id = `variant-${variantCount}`;
    
    variantDiv.innerHTML = `
        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Color (lowercase letters only)</label>
                <input type="text" name="variants[${variantCount}][color]" 
                       class="form-control" 
                       placeholder="e.g. red, blue, green" 
                       required>
            </div>
            
            <div class="col-md-6 mb-3">
                <label class="form-label">Quantity</label>
                <input type="number" name="variants[${variantCount}][quantity]" class="form-control" required>
            </div>
            
            <div class="col-12">
                <button type="button" class="btn btn-danger" onclick="removeVariant(${variantCount})">
                    Remove Variant
                </button>
            </div>
        </div>
    `;
    
    container.appendChild(variantDiv);
    variantCount++;
}
    
    function removeVariant(id) {
        const variantDiv = document.getElementById(`variant-${id}`);
        if (variantDiv) {
            variantDiv.remove();
        }
    }
    
    
    </script>